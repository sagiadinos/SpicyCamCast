import{SpicyBase}from"./SpicyBase.js";export class SpicyCam extends SpicyBase{#e=[];#t="";constructor(e){super(e)}get camerasList(){return this.#e}countCameras(){return this.#e.length}get currentDeviceId(){return this.#t}getMediaConstraints(){const e={};return e.deviceId={exact:this.#t},e.width={ideal:3840},e.height={ideal:2160},{video:e,audio:!0}}selectCamera(e){for(let t of this.#e)if(e===t.deviceId)return void(this.#t=t.deviceId)}detectVideoDevices(){return new Promise((async(e,t)=>{try{await navigator.mediaDevices.getUserMedia({video:!0,audio:!0});const t=await navigator.mediaDevices.enumerateDevices();this.#e=t.filter((e=>"videoinput"===e.kind)),e(this.#e)}catch(e){console.error("Error accessing media devices:",e),"NotAllowedError"===e.name?t(new Error("Permission to access media devices was denied.")):"NotFoundError"===e.name?t(new Error("No media devices found.")):t(new Error("An unknown error occurred."))}}))}justStart(){return new Promise((async(e,t)=>{try{await this.detectVideoDevices(),this.countCameras()>0?(this.#t=this.#e[0].deviceId,await this.startCamera(),e()):t(new Error("No video device was found."))}catch(e){t(e)}}))}async startCamera(){return new Promise(((e,t)=>{navigator.mediaDevices.getUserMedia(this.getMediaConstraints()).then((t=>{const i=t.getVideoTracks()[0];this.settings=i.getSettings(),this.streamList.push(t),this.videoElement.srcObject=t,this.isMirror&&(this.videoElement.style.transform="scale(-1,1)"),this.videoElement.play(),e(this.#t)})).catch((e=>{console.log(e),t(e)}))}))}stopCamera(){this.stop()}}